
Linked List vs Array
    1. Array - 一组内存里连续的数据
        1.1 能用index访问->O(1) Access
        1.2 添加元素直接添加在最后->Amortized O(1) Add 考虑到扩容
        1.3 删除元素需要挪动后面所有元素的位置->O(n) Delete
    2. Linked List - 内存里不一定连续的数据
        2.1 不能用index访问->O(n) Access
        2.2 添加元素添加在最后->O(n) Add, 双链表 O(1)
        2.3 删除元素需要找到元素位置->O(n) Delete
Two Pointers
    两个指针指向Linked List节点，不再是index
    两个指针必定同向而行
        1.一个块，一个满，距离隔开多少
        2.两个指针移动速度
Linked List 找中间节点
    同向而行，一个每次前进两个节点，另一个前进一个节点

Recursion 递归
    Bottom up recursion 3 steps:
        1. Ask for subproblem result
        2. Do something in current level of recursion
        3. Return result

Practise:
Delete Node In a Linked List (237)
Linked List Cycle (141)
Reverse Linked List II (92)
Reverse Nodes In k-Group (25) (hard)